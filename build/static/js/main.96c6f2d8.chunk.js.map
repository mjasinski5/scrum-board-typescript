{"version":3,"sources":["App.tsx","serviceWorker.ts","localStorageDataProvider.ts","index.tsx"],"names":["entries","require","Blog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","dataProvider","localState","getData","setState","classes","sprints","releases","length","releaseName","name","releaseDate","Date","date","getTime","nowDate","calculatedHours","Math","round","calculatedDays","console","log","react_default","a","createElement","Fragment","CssBaseline_default","className","layout","Paper_default","mainFeaturedPost","mainFeaturedPostContent","Typography_default","align","component","variant","color","gutterBottom","paragraph","Grid_default","container","direction","spacing","cardGrid","map","post","item","key","xs","md","Card_default","card","cardDetails","CardContent_default","List_default","goals","g","ListItem_default","description","Avatar_default","CheckBoxOutlineBlankRounded_default","onClick","ListItemText_default","primary","Hidden_default","xsDown","CardMedia_default","cardMedia","image","title","footer","React","Component","withStyles","theme","defineProperty","width","marginLeft","unit","marginRight","breakpoints","up","toolbarMain","borderBottom","concat","palette","grey","toolbarTitle","flex","toolbarSecondary","justifyContent","backgroundColor","common","white","marginBottom","padding","paddingRight","mainGrid","marginTop","display","markdown","sidebarAboutBox","sidebarSection","background","paper","Boolean","window","location","hostname","match","localStorageDataProvider","localStorageData","localStorage","getItem","transformToData","JSON","parse","setItem","stringify","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96c6f2d8.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Markdown from \"./Markdown\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\nimport CheckBoxEmpty from \"@material-ui/icons/CheckBoxOutlineBlankRounded\";\nimport CheckBoxRounded from \"@material-ui/icons/CheckBoxRounded\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { IDataProvider, Data } from \"./interfaces\";\nlet entries = require(\"./entries.json\");\n\nconst styles = (theme: any) => ({\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  toolbarMain: {\n    borderBottom: `1px solid ${theme.palette.grey[300]}`,\n  },\n  toolbarTitle: {\n    flex: 1,\n  },\n  toolbarSecondary: {\n    justifyContent: \"space-between\",\n  },\n  mainFeaturedPost: {\n    backgroundColor: theme.palette.grey[800],\n    // background: `url(\"./wokiees.jpg\")`,\n    color: theme.palette.common.white,\n    marginBottom: theme.spacing.unit * 4,\n  },\n  mainFeaturedPostContent: {\n    padding: `${theme.spacing.unit * 6}px`,\n    [theme.breakpoints.up(\"md\")]: {\n      paddingRight: 0,\n    },\n  },\n  mainGrid: {\n    marginTop: theme.spacing.unit * 3,\n  },\n  card: {\n    display: \"flex\",\n  },\n  cardDetails: {\n    flex: 1,\n  },\n  cardMedia: {\n    width: 160,\n  },\n  markdown: {\n    padding: `${theme.spacing.unit * 3}px 0`,\n  },\n  sidebarAboutBox: {\n    padding: theme.spacing.unit * 2,\n    backgroundColor: theme.palette.grey[200],\n  },\n  sidebarSection: {\n    marginTop: theme.spacing.unit * 3,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing.unit * 8,\n    padding: `${theme.spacing.unit * 6}px 0`,\n  },\n});\n\ninterface PropType {\n  classes: any;\n  dataProvider: IDataProvider;\n  // releases: any;\n}\ninterface IState {\n  data: Data;\n}\n\nclass Blog extends React.Component<PropType, IState> {\n  constructor(props: PropType) {\n    super(props);\n    this.state = {\n      data: {} as Data,\n    };\n  }\n  private async getData() {\n    return entries;\n  }\n  async componentDidMount() {\n    const datProvider = this.props.dataProvider;\n    const localState = this.props.dataProvider.getData();\n\n    this.setState({\n      data: localState\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const sprints = this.state.data.releases && this.state.data.releases.length && this.state.data.releases[0].sprints;\n    const data = this.state.data;\n    const releaseName = (data.releases && data.releases.length && data.releases[0].name) || \"\";\n    const releaseDate =\n      (data.releases && data.releases.length && new Date(data.releases[0].date).getTime()) ||\n      new Date().getTime();\n    const nowDate = new Date().getTime();\n    const calculatedHours = Math.round(\n      (releaseDate - nowDate) / (1000 * 60 * 60)\n    );\n    const calculatedDays = Math.round(calculatedHours / 24);\n    console.log(calculatedDays);\n\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <div className={classes.layout}>\n          <main>\n            {/* Main featured post */}\n            <Paper className={classes.mainFeaturedPost}>\n              <div className={classes.mainFeaturedPostContent}>\n                <Typography\n                  align=\"center\"\n                  component=\"h1\"\n                  variant=\"h3\"\n                  color=\"inherit\"\n                  gutterBottom\n                >\n                  Release \"{releaseName}\"\" Countdown\n                </Typography>\n                <Typography align=\"center\" variant=\"h3\" color=\"error\" paragraph>\n                  {calculatedHours} hours\n                </Typography>\n              </div>\n            </Paper>\n            {/* <Grid container direction=\"column\">\n              <Grid container direction=\"row\" spacing={40} className={classes.cardGrid}>\n                <Grid item key=\"123\" xs={12} md={6}>\n                \n                </Grid>\n                <Grid item key=\"1233\" xs={12} md={6}>dupa2 </Grid>\n              </Grid>\n            </Grid> */}\n            <Grid\n              container\n              direction=\"row\"\n              spacing={40}\n              className={classes.cardGrid}\n            >\n              {sprints && sprints.map((post: any) => (\n                <Grid item key={post.name} xs={12} md={6}>\n                  <Card className={classes.card}>\n                    <div className={classes.cardDetails}>\n                      <CardContent>\n                        <Typography component=\"h2\" variant=\"h5\">\n                          {post.name}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                          {post.date}\n                        </Typography>\n                        <Typography variant=\"subtitle1\" paragraph>\n                          <List>\n                            {post.goals.map((g: any) => {\n                              return (\n                                <ListItem key={g.description}>\n                                  <Avatar>\n                                    <CheckBoxEmpty\n                                      onClick={() => {\n                                        // const nReleases = this.state.releases.find((s) => s.)\n                                        // this.setState({\n                                        //   ...this.state,\n                                        //   releases: releases\n                                        // })\n                                      }}\n                                    />\n                                  </Avatar>\n                                  <ListItemText primary={g.description} />\n                                </ListItem>\n                              );\n                            })}\n                          </List>\n                        </Typography>\n                      </CardContent>\n                    </div>\n                    <Hidden xsDown>\n                      <CardMedia\n                        className={classes.cardMedia}\n                        image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n                        title=\"Image title\"\n                      />\n                    </Hidden>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          </main>\n        </div>\n        {/* Footer */}\n        <footer className={classes.footer}>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom>\n            Footer\n          </Typography>\n          <Typography\n            variant=\"subtitle1\"\n            align=\"center\"\n            color=\"textSecondary\"\n            component=\"p\"\n          >\n            Something here to give the footer a purpose!\n          </Typography>\n        </footer>\n        {/* End footer */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Blog);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { IDataProvider, Data } from './interfaces';\nlet entries = require(\"./entries.json\");\n\nexport default class DataProvider implements IDataProvider {\n    \n    private transformToData(data: any) : Data{\n        if(!data) return {} as Data;\n        console.log('data', data)\n        return data as Data;\n    }\n\n    getData() : Data {\n        const localStorageData = localStorage.getItem('localState');\n\n        if(!localStorageData) {\n            return this.transformToData(entries);\n        }\n        return this.transformToData(JSON.parse(localStorageData));\n    }\n\n    saveData(data : Data) : void {\n        localStorage.setItem('localState', JSON.stringify(data));\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport LocalStorageDataProvider from './localStorageDataProvider';\n\nconst localStorageDataProvider = new LocalStorageDataProvider();\n// const dataProvider\nReactDOM.render(<App dataProvider={localStorageDataProvider} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}